# LV2 Contexts Extension
#
# Allows for an LV2 plugin to have several independent contexts, each with its
# own run callback and associated ports.
#
# Copyright (C) 2007 Dave Robillard
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

@prefix :     <http://drobilla.net/ns/lv2ext/contexts#> .
@prefix lv2:  <http://lv2plug.in/ns/lv2core#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .

<http://drobilla.net/ns/lv2ext/contexts> a lv2:Specification ;
	rdfs:comment """
An extension for LV2 plugins which have multiple concurrent contexts.

Any host which supports this extension must pass a "host feature" to
the plugin's instantiate method with URI http://drobilla.net/ns/lv2ext/contexts
and a pointer to a

struct {
	void* host_handle;
	void (*request_run)(void* host_handle, const char* context_uri);
}

where the plugin may call request_run with the given host_handle (from any
context) to demand immediate execution of the context specified.

If the host does not support blocking contexts, request_run may be set to NULL,
but plugins which have a :BlockingContext which is :mandatory MUST NOT be
instantiated.  If the plugin has ANY context which is :hardRtCapable,
request_run must be realtime safe (as defined by lv2:hardRtCapable).

Unless otherwise stated, each context (defined by some URI) adds a new
contexting class similar to the Audio class defined by LV2.  Each context has a
run callback and a connect_port callback both in the same class (i.e. can't be
called concurrently), but may be called concurrently with functions for other
contexts.  Context properties such as :hardRtCapable apply to both functions.
The host MUST only call the correct connect_port function associated with the
context for that port.
""" .


#########################
## Context Base Classes ##
#########################

:Context a rdfs:Class ;
	rdfs:label "Context" ;
	rdfs:comment "A context (execution context) of an LV2 plugin." .


:RollingContext a rdfs:Class ;
	rdfs:subClassOf :Context ;
	rdfs:comment """
A context which is is continually executed in blocks (like the standard LV2
run callback).  Extension data is a pointer to a

struct {
	void (*run)(LV2Handle instance, uint32_t sample_count);
	void (*connect_port)(LV2_Handle instance, uint32_t port, void* data);
}

When run is called, sample_count frames worth of input/output should be
read from/written to all ports associated with this context.
""" .


:BlockingContext a rdfs:Class ;
	rdfs:subClassOf :Context ;
	rdfs:comment """
A context which is executed only when there is work to be done
(e.g. a message is received).  Extension data is a pointer to a

struct {
	bool (*run)(LV2Handle instance, uint8_t* outputs_written)
	void (*connect_port)(LV2_Handle instance, uint32_t port, void* data);
}

When run is called, any pending input in ports associated with this context
should be read, and true returned iff output was written (meaning
plugins connected to ports where output has been written should be executed).

The callback MUST set the nth bit of outputs_written to 1 if the port with
index n was written to, otherwise 0.  The macros LV2_THREADS_SET_OUTPUT_WRITTEN
and LV2_THREADS_UNSET_OUTPUT_WRITTEN are provided for this (see lv2_contexts.h).
The callback MUST NOT touch any bits which correspond to ports for other contexts.
""" .


#######################
## Plugin Properties ##
#######################

:hasContext a rdf:Property ;
	rdfs:domain  lv2:Plugin ;
	rdfs:range   :Context ;
	rdfs:label   "Has a context" ;
	rdfs:comment """
Signifies a Plugin supports a certain context, defined by a URI.
If a plugin supports a context, the extension_data function, when called with
the URI for that context, should return a context descriptor as defined by the
specification of the context URI.  If a plugin has any contexts, it MUST specify
the associated context of ALL ports, with the :context port property.""" .


#####################
## Port Properties ##
#####################

:context a rdf:Property ;
	rdfs:domain lv2:Port ;
	rdfs:range  :Context ;
	rdfs:label  "Is used by context" ;
	rdfs:comment """
Every port on a plugin with contexts must be associated with exactly one context.
The port will only be connected/read/written by that context.""" .


##################
## Context Hints ##
##################

:ContextHint a rdfs:Class ;
    rdfs:label      "Context hint" ;
    rdfs:subClassOf lv2:Hint ;
    rdfs:comment    "Hint for a plugin context." .

:contextHint a rdf:Property ;
    rdfs:domain  :Context ;
    rdfs:range   :ContextHint ;
    rdfs:label   "Context hint" ;
    rdfs:comment "Relates Contexts to ContextHints." .

:hardRTCapable a :ContextHint ;
    rdfs:label   "Hard realtime capable" ;
    rdfs:comment """
Indicates that the context is capable of running in a "hard real-time"
environment, with identical conditions as lv2:hardRTCapable.
""" .

:mandatory a :ContextHint ;
    rdfs:label   "Mandatory context" ;
    rdfs:comment """
Indicates that the context is necessary for execution of the plugin whatsoever.
If a context is mandatory but the host does not know how to execute it (e.g. if
the context is blocking but the host doesn't support blocking contexts), the
host MUST NOT instantiate the plugin.
""" .


#######################
## Context Priorities ##
#######################

# Ignore this crap for now

:ContextPriority a rdfs:Class ;
	rdfs:label "Context priority" ;
	rdfs:comment """
The scheduling priority of a context.
""" .

:AudioPriority a rdfs:Class ;
	rdfs:subClassOf :ContextPriority ;
	rdfs:label "Audio context priority" ;
	rdfs:comment """
Signifies a context should be run with priority equal to that of the
standard LV2 run callback.
""" .

:MainPriority a rdfs:Class ;
	rdfs:subClassOf :ContextPriority ;
	rdfs:label "Main context priority" ;
	rdfs:comment """
Signifies a context should be run with priority equal to that of the
main context of the host (typically non-realtime default system priority).
""" .


:HighPriorityWorker a rdfs:Class ;
	rdfs:subClassOf :Context ;
	rdfs:comment """
A worker context with a high priority, just below that of the main run
callback.  If the run callback is run with realtime priority, the host
should run this context with (slighly lower) realtime priority as well.
""" .

:LowPriorityWorker a rdfs:Class ;
	rdfs:subClassOf :Context ;
	rdfs:comment """
A worker context with a low non-realtime priority.
""" .


#################################
## Specific context definitions ##
#################################

:MessageContext a rdfs:Class ;
	rdfs:subClassOf :BlockingContext ;
	rdfs:comment """
A blocking context for on demand message-like processing.
""" .

